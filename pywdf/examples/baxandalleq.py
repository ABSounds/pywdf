import sys
import os

current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)

from core.wdf import *
from core.rtype import *
from core.circuit import Circuit


class BaxandallEQ(Circuit):
    def __init__(self, fs: int, bass: float, treble: float) -> None:

        self.fs = fs
        self.bass = None
        self.treble = None
        
        self.Pt = 100.0e3
        self.Pb = 100.0e3

        # Port A
        self.Pt_plus = Resistor(self.Pt * .5)
        self.Resd = Resistor(10e3)
        self.P4 = ParallelAdaptor(self.Pt_plus, self.Resd)
        self.Cd = Capacitor(6.4e-9, fs)
        self.S4 = SeriesAdaptor(self.Cd, self.P4)

        # Port B
        self.Pt_minus = Resistor(self.Pt * .5)
        self.Rese = Resistor(1e3)
        self.P5 = ParallelAdaptor(self.Pt_minus, self.Rese)
        self.Ce = Capacitor(64e-9, fs)
        self.S5 = SeriesAdaptor(self.Ce, self.P5)
        self.Rl = Resistor(1e6)
        self.P1 = ParallelAdaptor(self.Rl, self.S5)

        # Port C
        self.Resc = Resistor(10e3)

        # Port D
        self.Pb_minus = Resistor(self.Pb * .5)
        self.Cc = Capacitor(22e-9, fs)
        self.P3 = ParallelAdaptor(self.Pb_minus, self.Cc)
        self.Resb = Resistor(1e3)
        self.S3 = SeriesAdaptor(self.Resb, self.P3)

        # Port E
        self.Pb_plus = Resistor(self.Pb * .5)
        self.Cb = Capacitor(22e-9, fs)
        self.P2 = ParallelAdaptor(self.Pb_plus, self.Cb)
        self.Resa = Resistor(10e3)
        self.S2 = SeriesAdaptor(self.Resa, self.P2)

        # Port F
        self.Ca = Capacitor(1e6,self.fs)

        self.R_adaptor = RTypeAdaptor([self.S4, self.P1, self.Resc, self.S3, self.S2], self._impedance_calc, 5)
        self.S1 = SeriesAdaptor(self.R_adaptor, self.Ca)
        self.Vin = IdealVoltageSource(self.S1)

        self.set_bass(bass)
        self.set_treble(treble)

        super().__init__(self.Vin, self.Vin, self.Rl)

    def _impedance_calc(self, R: RTypeAdaptor):
        Ra, Rb, Rc, Rd, Re = R.get_port_impedances()
        # This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
        # invoked with command: r_solver.py --datum 0 --adapt 5 --out ./test_outputs/baxandall_adapt5.txt --pywdf --verbose /Users/gusanthon/Documents/UPF/Thesis/R-Solver-main/netlists/baxandall.txt
        R.set_S_matrix([[-((Ra*Ra*Rb + Ra*Ra*Rc - Rb*Rc*Rc)*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + 2*Ra*Ra*Rb*Rc + (Ra*Ra - Rb*Rb)*Rc*Rc)*Rd + (Ra*Ra*Rb*Rb + 2*Ra*Ra*Rb*Rc + (Ra*Ra - Rb*Rb)*Rc*Rc + (Ra*Ra - 2*Rb*Rc)*Rd*Rd + 2*(Ra*Ra*Rb - Rb*Rc*Rc + (Ra*Ra - Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                          -((Ra*Ra*Rc + Ra*Rc*Rc)*Rd*Rd + (Ra*Rb*Rc + Ra*Rc*Rc + Ra*Rd*Rd + (Ra*Rb + 2*Ra*Rc)*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + (2*Ra*Ra*Rb*Rc + 2*(Ra*Ra + Ra*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rc)*Rd*Rd + (Ra*Ra*Rb + 2*Ra*Rc*Rc + 3*(Ra*Ra + Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                             ((2*Ra*Ra*Rb + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + Ra*Rb*Rc + Ra*Rb*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rb + (Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (2*Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (3*Ra*Ra*Rb + 2*Ra*Rb*Rb + (Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                     -((Ra*Rb*Rb + Ra*Rb*Rc + Ra*Rb*Rd)*Re*Re - (Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + (Ra*Ra*Rb*Rb + Ra*Rb*Rb*Rc - (Ra*Ra + Ra*Rb)*Rc*Rc + (Ra*Ra*Rb - Ra*Ra*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                    ((2*Ra*Ra*Rb + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (2*Ra*Ra*Rb*Rb + (Ra*Ra + Ra*Rb)*Rc*Rc + (3*Ra*Ra*Rb + 2*Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + Ra*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rd*Rd + (2*Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (2*Ra*Ra*Rb + 2*Ra*Rb*Rb + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rc*Rd + (Ra*Rb + Ra*Rc + Ra*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
            [-((Ra*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + 2*(Ra*Rb*Rb*Rc + (Ra*Rb + Rb*Rb)*Rc*Rc)*Rd + (2*Ra*Rb*Rb*Rc + 2*(Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Rb + 2*Rb*Rc)*Rd*Rd + (Ra*Rb*Rb + 2*Rb*Rc*Rc + 3*(Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),  ((Ra*Ra*Rc + Ra*Rc*Rc)*Rd*Rd - (Ra*Rb*Rb + Rb*Rb*Rc - Ra*Rc*Rc - Ra*Rd*Rd + (Rb*Rb - 2*Ra*Rc)*Rd)*Re*Re - (Ra*Ra*Rb*Rb + 2*Ra*Rb*Rb*Rc - (Ra*Ra - Rb*Rb)*Rc*Rc)*Rd - (Ra*Ra*Rb*Rb + 2*Ra*Rb*Rb*Rc - (Ra*Ra - Rb*Rb)*Rc*Rc - (Ra*Ra + 2*Ra*Rc)*Rd*Rd + 2*(Ra*Rb*Rb - Ra*Rc*Rc - (Ra*Ra - Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                            -((Ra*Ra*Rb + Ra*Rb*Rc)*Rd*Rd + (2*Ra*Rb*Rb + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb)*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rb + (Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (2*Ra*Ra*Rb*Rb + Ra*Rb*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (2*Ra*Ra*Rb + 3*Ra*Rb*Rb + (3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                      ((2*Ra*Rb*Rb + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra*Rb + 2*Ra*Rb*Rb)*Rc)*Rd + (2*Ra*Ra*Rb*Rb + (Ra*Rb + Rb*Rb)*Rc*Rc + (2*Ra*Ra*Rb + 3*Ra*Rb*Rb)*Rc + (2*Ra*Ra*Rb + 2*Ra*Rb*Rb + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                   -((Ra*Ra*Rb + Ra*Rb*Rc)*Rd*Rd + (Ra*Ra*Rb*Rb + Ra*Ra*Rb*Rc - (Ra*Rb + Rb*Rb)*Rc*Rc)*Rd - (Ra*Rb*Rb*Rc - Ra*Rb*Rd*Rd + (Ra*Rb + Rb*Rb)*Rc*Rc - (Ra*Rb*Rb - Rb*Rb*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rb + Rb*Rc)*Rd + (Rb*Rc + Rb*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
            [((2*Ra*Rb*Rc + (Ra + 2*Rb)*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rc*Rd)*Re*Re + 2*(Ra*Rb*Rb*Rc + (Ra*Rb + Rb*Rb)*Rc*Rc)*Rd + (2*Ra*Rb*Rb*Rc + (Ra + 2*Rb)*Rc*Rd*Rd + 2*(Ra*Rb + Rb*Rb)*Rc*Rc + ((Ra + 3*Rb)*Rc*Rc + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                        -((Ra*Ra*Rc + Ra*Rc*Rc)*Rd*Rd + (2*Ra*Rb*Rc + (2*Ra + Rb)*Rc*Rc + (2*Ra + Rb)*Rc*Rd)*Re*Re + 2*(Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + (2*Ra*Ra*Rb*Rc + Ra*Rc*Rd*Rd + 2*(Ra*Ra + Ra*Rb)*Rc*Rc + ((3*Ra + Rb)*Rc*Rc + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),   ((Ra*Ra*Rb - (Ra + Rb)*Rc*Rc)*Rd*Rd + (Ra*Rb*Rb - (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rd)*Re*Re + (Ra*Ra*Rb*Rb - (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc)*Rd + (Ra*Ra*Rb*Rb - (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb - (Ra + Rb)*Rc*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                     ((2*(Ra + Rb)*Rc*Rc + 2*(Ra + Rb)*Rc*Rd + (2*Ra*Rb + Rb*Rb)*Rc)*Re*Re + (Ra*Ra*Rb*Rc + (Ra*Ra + Ra*Rb)*Rc*Rc)*Rd + ((2*Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc*Rc + (2*Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (2*(Ra + Rb)*Rc*Rc + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                  -((2*(Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + ((Ra*Ra + 3*Ra*Rb + 2*Rb*Rb)*Rc*Rc + (Ra*Ra*Rb + 2*Ra*Rb*Rb)*Rc)*Rd + (Ra*Rb*Rb*Rc + 2*(Ra + Rb)*Rc*Rd*Rd + (Ra*Rb + Rb*Rb)*Rc*Rc + (2*(Ra + Rb)*Rc*Rc + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rc*Rd - Rb*Rc*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
            [((Ra*Rb*Rc + (Ra + Rb)*Rc*Rc)*Rd*Rd - (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Re*Re - ((Ra*Rb - Ra*Rc)*Rd*Rd + (Ra*Rb*Rb + Rb*Rb*Rc - (Ra + Rb)*Rc*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                    ((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + ((2*Ra + Rb)*Rd*Rd + (2*Ra*Rb + (2*Ra + Rb)*Rc)*Rd)*Re*Re + ((2*Ra*Ra + 2*Ra*Rb + (3*Ra + 2*Rb)*Rc)*Rd*Rd + (2*Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (2*Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                  ((Ra*Ra*Rb + (Ra*Ra + Ra*Rb)*Rc)*Rd*Rd + (2*(Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + ((2*Ra*Ra + 3*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + (2*Ra*Ra*Rb + Ra*Rb*Rb + (2*Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                            -((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd - (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc - (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc)*Re*Re - (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc - (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                               -((Ra*Ra*Rb + 2*(Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb)*Rc)*Rd*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + ((Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + 2*(Ra + Rb)*Rc*Rc + (3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Reb*Rd*Re + (Ra*Rb + (Ra + Rb)*Rc)*Rd)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
            [((Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + 2*Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + 2*Rb*Rb + (2*Ra + 3*Rb)*Rc)*Rd)*Re*Re + ((2*Ra*Rb + (Ra + 2*Rb)*Rc)*Rd*Rd + (2*Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                                                                                           ((Ra*Rb*Rc + (Ra + Rb)*Rc*Rc - Ra*Rd*Rd - (Ra*Rb - Rb*Rc)*Rd)*Re*Re - ((Ra*Ra + Ra*Rc)*Rd*Rd + (Ra*Ra*Rb + Ra*Ra*Rc - (Ra + Rb)*Rc*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                                        -((Ra*Rb*Rb + 2*(Ra + Rb)*Rd*Rd + (Ra*Rb + Rb*Rb)*Rc + (3*Ra*Rb + 2*Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + ((Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + (Ra*Ra*Rb + 2*Ra*Rb*Rb + (Ra*Ra + 3*Ra*Rb + 2*Rb*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                                                      -((Ra*Rb*Rb + 2*(Ra + Rb)*Rc*Rc + (3*Ra*Rb + Rb*Rb)*Rc + (Ra*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + (Ra*Ra*Rb + 2*(Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb)*Rc)*Rd)*Re)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Re),                               ((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd - (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd)/((Ra*Ra*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb)*Rc)*Rd*Rd + (Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra + Rb)*Rd*Rd + (2*Ra*Rb + Rb*Rb)*Rc + (2*Ra*Rb + Rb*Rb + 2*(Ra + Rb)*Rc)*Rd)*Re*Re + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc)*Rd + (Ra*Ra*Rb*Rb + (Ra*Ra + 2*Ra*Rb + Rb*Rb)*Rc*Rc + (Ra*Ra + 2*Ra*Rb + 2*(Ra + Rb)*Rc)*Rd*Rd + 2*(Ra*Ra*Rb + Ra*Rb*Rb)*Rc + 2*(Ra*Ra*Rb + Ra*Rb*Rb + (Ra + Rb)*Rc*Rc + (Ra*Ra + 3*Ra*Rb + Rb*Rb)*Rc)*Rd)*Rea*Rb + (Ra + Rb)*Rc + Ra*Rd)*Re/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re),],
            [-(Rc*Rd + (Rb + Rc + Rd)*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Rea + Rc)*Rd + (Rc + Rd)*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Rea*Rd - Rb*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        -(Ra*Rb + (Ra + Rb)*Rc + Rb*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        -(Ra*Rb + (Ra + Rb)*Rc + Ra*Rd)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re
        )

        Rf = ((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re)/(Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)
        return Rf

    def set_bass(self, new_bass: float) -> None:
        if self.bass != new_bass:
            if new_bass <= 0:
                new_bass = 1e-20
            elif new_bass >= 1:
                new_bass = .99999999999999
            self.Pb_plus.set_resistance(self.Pb * new_bass)
            self.Pb_minus.set_resistance(self.Pb * (1 - new_bass))
            self.bass = new_bass

    def set_treble(self, new_treble: float) -> None:
        if self.treble != new_treble:
            if new_treble <= 0:
                new_treble = 1e-20
            elif new_treble >= 1:
                new_treble = .99999999999999
            self.Pt_plus.set_resistance(self.Pt * new_treble)
            self.Pt_plus.set_resistance(self.Pt * (1 - new_treble))
            self.treble = new_treble


############################################################################################


class UnadaptedBaxandallEQ(BaxandallEQ):
    def __init__(self, fs: int, bass: float, treble: float) -> None:

        def _impedance_calc(R: RootRTypeAdaptor):
            Ra, Rb, Rc, Rd, Re, Rf = R.get_port_impedances()
            # This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
            # invoked with command: r_solver.py --datum 0 --out ./test_outputs/baxandall_unadapt.txt --pywdf --verbose /Users/gusanthon/Documents/UPF/Thesis/R-Solver-main/netlists/baxandall.txt
            R.set_S_matrix([[-((Ra*Rb + (Ra - Rb)*Rc)*Rd + (Ra*Rb + (Ra - Rb)*Rc + (Ra - Rb)*Rd)*Re + (Ra*Rb + (Ra - Rb)*Rc + (Ra - Rc)*Rd - (Rb + Rc + Rd)*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                          -2*(Ra*Rc*Rd + Ra*Rc*Rf + (Ra*Rc + Ra*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                           2*(Ra*Rb*Rd + Ra*Rb*Re + (Ra*Rb + Ra*Rd)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                               -2*(Ra*Rb*Re - Ra*Rc*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                              2*(Ra*Rb*Rd + (Ra*Rb + Ra*Rc + Ra*Rd)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                             -2*(Ra*Rc*Rd + (Ra*Rb + Ra*Rc + Ra*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),],
                [-2*(Rb*Rc*Rd + Rb*Rc*Rf + (Rb*Rc + Rb*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf), -((Ra*Rb - (Ra - Rb)*Rc)*Rd + (Ra*Rb - (Ra - Rb)*Rc - (Ra - Rb)*Rd)*Re + (Ra*Rb - (Ra - Rb)*Rc - (Ra + Rc)*Rd + (Rb - Rc - Rd)*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                          -2*(Ra*Rb*Rd + Ra*Rb*Re + (Ra*Rb + Rb*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                              2*(Ra*Rb*Re + (Ra*Rb + Rb*Rc + Rb*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                               -2*(Ra*Rb*Rd - Rb*Rc*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                           -2*((Ra*Rb + Rb*Rc)*Rd + (Rb*Rc + Rb*Rd)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),],
                [2*(Rb*Rc*Rd + Rb*Rc*Re + (Rb*Rc + Rc*Rd)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                          -2*(Ra*Rc*Rd + Ra*Rc*Re + (Ra*Rc + Rc*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),  ((Ra*Rb - (Ra + Rb)*Rc)*Rd + (Ra*Rb - (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb - (Ra + Rb)*Rc + (Ra - Rc)*Rd + (Rb - Rc + Rd)*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                               2*((Ra + Rb)*Rc*Re + (Ra*Rc + Rc*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                              -2*((Ra + Rb)*Rc*Rd + (Rb*Rc + Rc*Rd)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                               -2*(Ra*Rc*Rd - Rb*Rc*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),],
                [-2*(Rb*Rd*Re - Rc*Rd*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                               2*(Ra*Rd*Re + ((Ra + Rc)*Rd + Rd*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                               2*((Ra + Rb)*Rd*Re + (Ra*Rd + Rd*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf), -((Ra*Rb + (Ra + Rb)*Rc)*Rd - (Ra*Rb + (Ra + Rb)*Rc - (Ra + Rb)*Rd)*Re - (Ra*Rb + (Ra + Rb)*Rc - (Ra + Rc)*Rd + (Rb + Rc - Rd)*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                              -2*(Rc*Rd*Rf + (Ra*Rb + (Ra + Rb)*Rc)*Rd)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                              -2*(Rb*Rd*Re + (Ra*Rb + (Ra + Rb)*Rc)*Rd)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),],
                [2*(Rb*Rd*Re + (Rb + Rc + Rd)*Re*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                               -2*(Ra*Rd*Re - Rc*Re*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                 -2*((Ra + Rb)*Rd*Re + (Rb + Rd)*Re*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                              -2*(Rc*Re*Rf + (Ra*Rb + (Ra + Rb)*Rc)*Re)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),  ((Ra*Rb + (Ra + Rb)*Rc)*Rd - (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd - (Rb + Rc + Rd)*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                   -2*(Ra*Rb + (Ra + Rb)*Rc + Ra*Rd)*Re/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),],
                [-2*(Rc*Rd + (Rb + Rc + Rd)*Re)*Rf/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                    -2*((Ra + Rc)*Rd + (Rc + Rd)*Re)*Rf/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                                  -2*(Ra*Rd - Rb*Re)*Rf/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                   -2*(Ra*Rb + (Ra + Rb)*Rc + Rb*Re)*Rf/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),                                                                                                   -2*(Ra*Rb + (Ra + Rb)*Rc + Ra*Rd)*Rf/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),  ((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re - (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf)/((Ra*Rb + (Ra + Rb)*Rc)*Rd + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rb)*Rd)*Re + (Ra*Rb + (Ra + Rb)*Rc + (Ra + Rc)*Rd + (Rb + Rc + Rd)*Re)*Rf),]]
            )
        super().__init__(fs, bass, treble)

        self.Vin = ResistiveVoltageSource()
        self.S1 = SeriesAdaptor(self.Vin,self.Ca)
        self.R_adaptor = RootRTypeAdaptor([self.S4,self.P1,self.Resc, self.S3, self.S2, self.S1], _impedance_calc)
        
        self.root = self.R_adaptor
        self.source = self.Vin

    def process_sample(self, sample: float) -> float:
        self.Vin.set_voltage(sample)
        self.R_adaptor.compute()
        return self.output.wave_to_voltage()


if __name__ == '__main__':

    beq = UnadaptedBaxandallEQ(44100, .5 , .5)
    beq.plot_freqz()