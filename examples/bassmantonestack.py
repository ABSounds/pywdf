# From medium article : 
# https://jatinchowdhury18.medium.com/wave-digital-filter-circuit-models-with-r-type-adaptors-39ad0ad658ce

import sys
import os


current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)

from core.wdf import *
from core.rtype import *
from core.circuit import Circuit


class BassmanToneStack(Circuit):
    def __init__(self, fs: int, bass: float, mid: float, treble: float) -> None:

        self.fs = fs
        self.bass = -1
        self.mid = -1
        self.treble = -1
        
        self.R1max = 250.0e3
        self.R2max = 1.0e6
        self.R3max = 25.0e3

        # Port B
        self.C1 = Capacitor(0.25e-9, fs)
        self.R1_plus = Resistor(self.R1max * 0.5)
        self.R1_minus = Resistor(self.R1max * 0.5)
        self.SR1 = SeriesAdaptor(self.R1_plus, self.R1_minus)
        self.Sb = SeriesAdaptor(self.SR1, self.C1)

        # Port C
        self.R4 = Resistor(56.0e3)

        # Port D
        self.C2 = Capacitor(20.0e-9, fs)

        # Port E
        self.C3 = Capacitor(20.0e-9, fs)

        # Port F
        self.R2 = Resistor(self.R2max * 0.5)
        self.R3_plus = Resistor(self.R3max * 0.5)
        self.Sf = SeriesAdaptor(self.R2, self.R3_plus)

        # Port G
        self.R3_minus = Resistor(self.R3max * 0.5)

        # R-Type adaptor
        self.R_adaptor = RTypeAdaptor([self.Sb, self.R4, self.C2, self.C3, self.Sf, self.R3_minus], self.impedance_calc, 0)

        # Port A
        self.Vin = IdealVoltageSource(self.R_adaptor)

        self.set_bass(bass)
        self.set_mid(mid)
        self.set_treble(treble)

        super().__init__(self.Vin, self.Vin, self.R3_minus)

    def impedance_calc(self,R: RTypeAdaptor):
        Rb, Rc, Rd, Re, Rf, Rg = R.get_port_impedances()
        R.set_S_matrix ([[ 0,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           -(Rc*Rd + (Rc + Rd)*Re + Rc*Rf)/((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf), -(Rb*Rd + Rb*Re + (Rb + Rd)*Rf)/((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf), -(Rb*Re - Rc*Rf)/((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf), -(Rb*Rd + (Rb + Rc + Rd)*Rf)/((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf), -(Rc*Rd + (Rb + Rc + Rd)*Re)/((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf), -1],
                             [ -(Rb*Rc*Rd + Rb*Rc*Rf + (Rb*Rc + Rb*Rd)*Re)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg), -(Rb*Rb*Rc*Rd*Rd + (Rb*Rb*Rc + Rb*Rb*Rd)*Re*Re + (Rb*Rb*Rc - Rc*Rc*Rd - Rc*Rd*Rd + (Rb*Rb - Rc*Rc - 2*Rc*Rd - Rd*Rd)*Re)*Rf*Rf + (2*Rb*Rb*Rc*Rd + Rb*Rb*Rd*Rd)*Re + (2*Rb*Rb*Rc*Rd - Rc*Rc*Rd*Rd + (Rb*Rb - Rc*Rc - 2*Rc*Rd - Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc - Rc*Rd*Rd + (Rb*Rb - Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb - Rc*Rc)*Rd*Rd + (Rb*Rb - Rc*Rc - 2*Rc*Rd - Rd*Rd)*Re*Re + (Rb*Rb - Rc*Rc - 2*Rc*Rd - Rd*Rd)*Rf*Rf - 2*(Rc*Rd*Rd - (Rb*Rb - Rc*Rc)*Rd)*Re - 2*(Rc*Rd*Rd - (Rb*Rb - Rc*Rc)*Rd - (Rb*Rb - Rc*Rc - 2*Rc*Rd - Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg), (Rb*Rb*Rc*Rd*Rd + (Rb*Rb*Rc + Rb*Rb*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re)*Rf*Rf + (2*Rb*Rb*Rc*Rd + Rb*Rb*Rd*Rd)*Re + (2*Rb*Rb*Rc*Rd + Rb*Rc*Rd*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re*Re + (2*Rb*Rb*Rc + Rb*Rd*Rd + 3*(Rb*Rb + Rb*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + Rb*Rc)*Rd*Rd + (Rb*Rb + Rb*Rc + Rb*Rd)*Re*Re + (Rb*Rb + Rb*Rc + Rb*Rd)*Rf*Rf + (Rb*Rd*Rd + 2*(Rb*Rb + Rb*Rc)*Rd)*Re + (Rb*Rd*Rd + 2*(Rb*Rb + Rb*Rc)*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                    (Rb*Rb*Rc*Rd*Re + (Rb*Rb*Rc + Rb*Rb*Rd)*Re*Re + (2*Rb*Rb*Rc + Rb*Rc*Rc + 2*Rb*Rc*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re)*Rf*Rf + (2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re*Re + (2*Rb*Rb*Rc + Rb*Rc*Rc)*Rd + (3*Rb*Rb*Rc + Rb*Rc*Rc + (2*Rb*Rb + 3*Rb*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + Rb*Rc)*Rd*Re + (Rb*Rb + Rb*Rc + Rb*Rd)*Re*Re + (Rb*Rb + Rb*Rc + Rb*Rd)*Rf*Rf + ((Rb*Rb + Rb*Rc)*Rd + 2*(Rb*Rb + Rb*Rc + Rb*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                                                                                                                         (Rb*Rb*Rc*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rc*Rd)*Rf*Rf + (Rb*Rb*Rc*Rd + Rb*Rb*Rd*Rd)*Re - (Rb*Rc*Rc*Rd - Rb*Rc*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc - Rb*Rb*Rd - Rb*Rd*Rd)*Re)*Rf + 2*((Rb*Rb + Rb*Rc)*Rd*Rd + (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Re + (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                         -((2*Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (2*(Rb*Rb + Rb*Rc)*Rd*Rd + (3*Rb*Rb*Rc + 2*Rb*Rc*Rc)*Rd)*Re + (2*Rb*Rc*Rd*Rd + (2*Rb*Rb*Rc + Rb*Rc*Rc)*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + 2*Rb*Rd*Rd + (2*Rb*Rb + 3*Rb*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + Rb*Rc)*Rd*Rd + (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Re + (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rgb*Rc*Rd + Rb*Rc*Rf + (Rb*Rc + Rb*Rd)*Re)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)],
                             [ -(Rb*Rc*Rd + Rb*Rc*Re + (Rb*Rc + Rc*Rd)*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg), (Rb*Rc*Rc*Rd*Rd + (Rb*Rc*Rc + Rb*Rc*Rd)*Re*Re + (Rb*Rc*Rc + Rc*Rc*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re)*Rf*Rf + (2*Rb*Rc*Rc*Rd + Rb*Rc*Rd*Rd)*Re + (2*Rb*Rc*Rc*Rd + Rc*Rc*Rd*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re*Re + (2*Rb*Rc*Rc + Rc*Rd*Rd + 3*(Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rc + Rc*Rc + Rc*Rd)*Re*Re + (Rb*Rc + Rc*Rc + Rc*Rd)*Rf*Rf + (Rc*Rd*Rd + 2*(Rb*Rc + Rc*Rc)*Rd)*Re + (Rc*Rd*Rd + 2*(Rb*Rc + Rc*Rc)*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg), -(Rb*Rc*Rc*Rd*Rd + (Rb*Rc*Rc - Rb*Rb*Rd - Rb*Rd*Rd)*Re*Re + (Rb*Rc*Rc + Rc*Rc*Rd - (Rb*Rb - Rc*Rc + 2*Rb*Rd + Rd*Rd)*Re)*Rf*Rf + (2*Rb*Rc*Rc*Rd - Rb*Rb*Rd*Rd)*Re + (2*Rb*Rc*Rc*Rd + Rc*Rc*Rd*Rd - (Rb*Rb - Rc*Rc + 2*Rb*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rc*Rc - Rb*Rd*Rd - (Rb*Rb - Rc*Rc)*Rd)*Re)*Rf - ((Rb*Rb - Rc*Rc)*Rd*Rd + (Rb*Rb - Rc*Rc + 2*Rb*Rd + Rd*Rd)*Re*Re + (Rb*Rb - Rc*Rc + 2*Rb*Rd + Rd*Rd)*Rf*Rf + 2*(Rb*Rd*Rd + (Rb*Rb - Rc*Rc)*Rd)*Re + 2*(Rb*Rd*Rd + (Rb*Rb - Rc*Rc)*Rd + (Rb*Rb - Rc*Rc + 2*Rb*Rd + Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                   -((Rb*Rb*Rc + 2*Rb*Rc*Rc)*Rd*Re + (Rb*Rb*Rc + 2*Rb*Rc*Rc + 2*Rb*Rc*Rd)*Re*Re + (Rb*Rc*Rc + Rc*Rc*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re)*Rf*Rf + (Rb*Rc*Rc*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re*Re + (Rb*Rb*Rc + 3*Rb*Rc*Rc + (3*Rb*Rc + 2*Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rc + Rc*Rc)*Rd*Re + (Rb*Rc + Rc*Rc + Rc*Rd)*Re*Re + (Rb*Rc + Rc*Rc + Rc*Rd)*Rf*Rf + ((Rb*Rc + Rc*Rc)*Rd + 2*(Rb*Rc + Rc*Rc + Rc*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                         -((Rb*Rb*Rc + 2*Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd)*Rf*Rf + (2*Rb*Rc*Rd*Rd + (Rb*Rb*Rc + 2*Rb*Rc*Rc)*Rd)*Re + (2*(Rb*Rc + Rc*Rc)*Rd*Rd + (2*Rb*Rb*Rc + 3*Rb*Rc*Rc)*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + 2*Rc*Rd*Rd + (3*Rb*Rc + 2*Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rc + Rc*Rc)*Rd*Rd + (Rc*Rd*Rd + (Rb*Rc + Rc*Rc)*Rd)*Re + (Rc*Rd*Rd + (Rb*Rc + Rc*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                                                                                                                         (Rb*Rc*Rc*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rc*Rd)*Re*Re - (Rb*Rb*Rc*Rd - Rb*Rc*Rd*Rd)*Re + (Rb*Rc*Rc*Rd + Rc*Rc*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc - Rc*Rc*Rd - Rc*Rd*Rd)*Re)*Rf + 2*((Rb*Rc + Rc*Rc)*Rd*Rd + (Rc*Rd*Rd + (Rb*Rc + Rc*Rc)*Rd)*Re + (Rc*Rd*Rd + (Rb*Rc + Rc*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rgb*Rc*Rd + Rb*Rc*Re + (Rb*Rc + Rc*Rd)*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)],
                             [ -(Rb*Rd*Re - Rc*Rd*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg), (Rb*Rc*Rd*Rd*Re + (Rb*Rc*Rd + Rb*Rd*Rd)*Re*Re + (2*Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re*Re + ((2*Rb + 3*Rc)*Rd*Rd + (3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + 2*((Rb + Rc)*Rd*Rd*Re + ((Rb + Rc)*Rd + Rd*Rd)*Re*Re + ((Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + ((Rb + Rc)*Rd*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg), -((Rb*Rb + 2*Rb*Rc)*Rd*Rd*Re + (2*Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rc*Rd + Rc*Rd*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + (Rb*Rc*Rd*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re*Re + ((3*Rb + 2*Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc)*Rd)*Re)*Rf + 2*((Rb + Rc)*Rd*Rd*Re + ((Rb + Rc)*Rd + Rd*Rd)*Re*Re + ((Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + ((Rb + Rc)*Rd*Rd + 2*((Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),     -((Rb*Rb + 2*Rb*Rc)*Rd*Rd*Re + (Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc - Rb*Rd*Rd)*Re*Re - (Rb*Rb*Rc + Rb*Rc*Rc - Rc*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc - Rd*Rd)*Re)*Rf*Rf + ((2*Rb*Rc + Rc*Rc)*Rd*Rd - (Rb*Rb + 2*Rb*Rc + Rc*Rc - Rd*Rd)*Re*Re - 2*(Rb*Rb*Rc + Rb*Rc*Rc - (Rb + Rc)*Rd*Rd)*Re)*Rf + (2*(Rb + Rc)*Rd*Rd*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd - (Rb*Rb + 2*Rb*Rc + Rc*Rc - Rd*Rd)*Re*Re - (Rb*Rb + 2*Rb*Rc + Rc*Rc - Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd - (Rb*Rb + 2*Rb*Rc + Rc*Rc - Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                    (2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rc*Rd*Rd + (Rb*Rc + Rc*Rc)*Rd)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((3*Rb*Rc + 2*Rc*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + ((Rb + 2*Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + 2*Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + ((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + ((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                   -(2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rd*Rd + (Rb*Rb + Rb*Rc)*Rd)*Re*Re + ((2*Rb*Rb + 3*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + ((2*Rb + Rc)*Rd*Rd + (2*Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + ((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + ((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rgb*Rd*Re - Rc*Rd*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)],
                             [ -(Rb*Rd*Re + (Rb + Rc + Rd)*Re*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg), (Rb*Rc*Rd*Rd*Re - (Rb*Rc + Rc*Rc + Rc*Rd)*Re*Rf*Rf + (Rb*Rc*Rd + Rb*Rd*Rd)*Re*Re - ((Rb*Rc + Rc*Rc - Rb*Rd - Rd*Rd)*Re*Re + (Rc*Rc*Rd - Rc*Rd*Rd)*Re)*Rf + 2*((Rb + Rc)*Rd*Rd*Re + ((Rb + Rc)*Rd + Rd*Rd)*Re*Re + ((Rb + Rc)*Rd + Rd*Rd)*Re*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg), -((Rb*Rb + 2*Rb*Rc)*Rd*Rd*Re + (Rb*Rb + Rb*Rc + (2*Rb + Rc)*Rd + Rd*Rd)*Re*Rf*Rf + (2*Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + ((Rb*Rb + Rb*Rc + (3*Rb + 2*Rc)*Rd + 2*Rd*Rd)*Re*Re + (2*(Rb + Rc)*Rd*Rd + (2*Rb*Rb + 3*Rb*Rc)*Rd)*Re)*Rf + 2*((Rb + Rc)*Rd*Rd*Re + ((Rb + Rc)*Rd + Rd*Rd)*Re*Re + ((Rb + Rc)*Rd + Rd*Rd)*Re*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                       ((Rb*Rc + Rc*Rc + Rc*Rd)*Re*Rf*Rf + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Re + (2*Rb*Rb*Rc + 2*Rb*Rc*Rc + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + ((Rb*Rb + 3*Rb*Rc + 2*Rc*Rc + (Rb + 2*Rc)*Rd)*Re*Re + (2*Rb*Rb*Rc + 2*Rb*Rc*Rc + (3*Rb*Rc + 2*Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + (Rb + Rc)*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + (Rb + Rc)*Rd)*Re*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                    ((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd - (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd)*Rf*Rf + ((2*Rb*Rc + Rc*Rc)*Rd*Rd - (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd - (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                             ((2*Rb*Rb*Rc + 2*Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 3*Rb*Rc)*Rd)*Re*Re + (Rb*Rc*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (2*Rb*Rb*Rc + 2*Rb*Rc*Rc + Rc*Rd*Rd + (3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Rf + ((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rgb*Rd*Re + (Rb + Rc + Rd)*Re*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)],
                             [ -(Rc*Rd + (Rb + Rc + Rd)*Re)*Rf/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg), -((2*Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rc + Rc*Rc + (2*Rb + 3*Rc)*Rd + 2*Rd*Rd)*Re)*Rf*Rf + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rc + Rc*Rc + (Rb + 2*Rc)*Rd + Rd*Rd)*Re*Re + (2*(Rb + Rc)*Rd*Rd + (3*Rb*Rc + 2*Rc*Rc)*Rd)*Re)*Rf + 2*(((Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + ((Rb + Rc)*Rd*Rd + ((Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg), ((Rb*Rc*Rd + Rc*Rd*Rd - (Rb*Rb + Rb*Rc - Rc*Rd - Rd*Rd)*Re)*Rf*Rf + (Rb*Rc*Rd*Rd - (Rb*Rb + Rb*Rc + Rb*Rd)*Re*Re - (Rb*Rb*Rd - Rb*Rd*Rd)*Re)*Rf + 2*(((Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + ((Rb + Rc)*Rd*Rd + ((Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                               -((2*Rb*Rb*Rc + 2*Rb*Rc*Rc + (2*Rb*Rc + Rc*Rc)*Rd + (2*Rb*Rb + 3*Rb*Rc + Rc*Rc + (2*Rb + Rc)*Rd)*Re)*Rf*Rf + ((Rb*Rb + Rb*Rc + Rb*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + (2*Rb*Rb*Rc + 2*Rb*Rc*Rc + (2*Rb*Rb + 3*Rb*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + 2*Rb*Rc + Rc*Rc + (Rb + Rc)*Rd)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + (Rb + Rc)*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                       ((2*Rb*Rb*Rc + 2*Rb*Rc*Rc + Rc*Rd*Rd + (3*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + (Rb*Rc*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + (2*Rb*Rb*Rc + 2*Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 3*Rb*Rc)*Rd)*Re)*Rf + 2*((Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + ((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                      ((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re - (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re - (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re)*Rg)/((Rb*Rb*Rc + Rb*Rc*Rc)*Rd*Rd + (Rb*Rb*Rc + Rb*Rc*Rc + Rb*Rd*Rd + (Rb*Rb + 2*Rb*Rc)*Rd)*Re*Re + (Rb*Rb*Rc + Rb*Rc*Rc + Rc*Rd*Rd + (2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf*Rf + ((Rb*Rb + 2*Rb*Rc)*Rd*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd)*Re + ((2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + 2*(Rb*Rb*Rc + Rb*Rc*Rc)*Rd + 2*(Rb*Rb*Rc + Rb*Rc*Rc + (Rb + Rc)*Rd*Rd + (Rb*Rb + 3*Rb*Rc + Rc*Rc)*Rd)*Re)*Rf + ((Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re*Re + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Rf*Rf + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd)*Re + 2*((Rb + Rc)*Rd*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc)*Rd + (Rb*Rb + 2*Rb*Rc + Rc*Rc + 2*(Rb + Rc)*Rd + Rd*Rd)*Re)*Rf)*Rg),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             -(Rc*Rd + (Rb + Rc + Rd)*Re)*Rf/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)],
                             [ -((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg), -(Rc*Rd + (Rc + Rd)*Re + Rc*Rf)*Rg/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rgb*Rd + Rb*Re + (Rb + Rd)*Rf)*Rg/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rgb*Re - Rc*Rf)*Rg/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rgb*Rd + (Rb + Rc + Rd)*Rf)*Rg/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rgc*Rd + (Rb + Rc + Rd)*Re)*Rg/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rgb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf)/(Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)]])
        Ra = (Rb*Rc*Rd + (Rb*Rc + Rb*Rd)*Re + (Rb*Rc + Rc*Rd + (Rb + Rc + Rd)*Re)*Rf + ((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)*Rg)/((Rb + Rc)*Rd + (Rb + Rc + Rd)*Re + (Rb + Rc + Rd)*Rf)
        return Ra

    def set_bass(self, new_bass: float):
        if self.bass != new_bass:
            self.R2.set_resistance(self.R2max * new_bass)
            self.bass = new_bass

    def set_mid(self, new_mid: float):
        if self.mid != new_mid:
            self.R3_plus.set_resistance(self.R1max * (1 - new_mid))
            self.R3_minus.set_resistance(self.R1max * new_mid)
            self.treble = new_mid

    def set_treble(self, new_treble: float):
        if self.treble != new_treble:
            self.R1_plus.set_resistance(self.R1max * (1 - new_treble))
            self.R1_minus.set_resistance(self.R1max * new_treble)
            self.treble = new_treble

    def process_sample(self, sample: float):
        return super().process_sample(sample) + \
                self.R1_minus.wave_to_voltage() + \
                self.R3_plus.wave_to_voltage() + \
                self.R2.wave_to_voltage()


if __name__ == '__main__':
    bts = BassmanToneStack(44100, .5 , .5 ,.5)
    bts.plot_freqz()